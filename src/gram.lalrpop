use std::str::FromStr;

grammar;
use crate::ast::{Function, FunctionArg};

pub Function: Function = {
    <i:Identifier> "(" <a:FunctionArgs> ")" => Function::new(i, a)
}
pub FunctionArgs = {
    <FunctionArg> => vec![<>],
    (<FunctionArg> ",")*,
    (<FunctionArg> ",")+ <FunctionArg> => vec![<>]
}
pub FunctionArg: FunctionArg = {
    <ty:Identifier> <ident:Identifier> => FunctionArg{ty: ty, ident: ident}
}
pub Identifier: String =  {
    r"[A-z]*" => String::from(<>)
}

// pub Expr: i32 = {
//     <l:Expr> "+" <r:Factor> => l + r,
//     <l:Expr> "-" <r:Factor> => l - r,
//     Factor,
// };

// Factor: i32 = {
//     <l:Factor> "*" <r:Term> => l * r,
//     <l:Factor> "/" <r:Term> => l / r,
//     Term,
// };

// Term: i32 = {
//     Num,
//     "(" <Expr> ")",
// };

// Num: i32 = {
//     r"[0-9]+" => i32::from_str(<>).unwrap(),
// };