[ca_parser_bison 0.37.0] Bsion root dir "ca_parser_bison/bison"
[ca_parser 0.1.0] processing file `/home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop`
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Local ambiguity detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   The problem arises after having observed the following symbols in the input:
[ca_parser 0.1.0]     (<Expr> ",")+ IdentExpr "("
[ca_parser 0.1.0]   At that point, if the next token is a `")"`, then the parser can proceed in two different ways.
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   First, the parser could execute the production at /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43, which would consume the top 0 token(s) from the stack and produce a `Comma<Expr>`. This might then yield a parse tree like
[ca_parser 0.1.0]     IdentExpr "(" ╷             ╷ ")"
[ca_parser 0.1.0]     │             └─Comma<Expr>─┘   │
[ca_parser 0.1.0]     └─CallExpr──────────────────────┘
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   Alternatively, the parser could shift the `")"` token and later use it to construct a `CallExpr`. This might then yield a parse tree like
[ca_parser 0.1.0]     (<Expr> ",")+ IdentExpr "(" ")"
[ca_parser 0.1.0]     │             ├─CallExpr──────┤
[ca_parser 0.1.0]     │             └─Expr──────────┤
[ca_parser 0.1.0]     └─Comma<Expr>─────────────────┘
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   See the LALRPOP manual for advice on making your grammar LR(1).
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) (<Expr> ",")+ Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"if"` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) (<Expr> ",")+ Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"{"` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) (<Expr> ",")+ Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `r#"\"[a-zA-Z0-9]+\""#` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) (<Expr> ",")+ Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `r#"[0-9]+"#` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) (<Expr> ",")+ Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   (<Expr> ",")+ = (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = IdentExpr "(" (*) ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) (<Expr> ",")+ Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `r#"[a-zA-Z]+[a-zA-Z0-9]*"#` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:59:5: 59:17: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   AndExpression = AndExpression (*) "&" RelationExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   XorExpression = AndExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"&"` we can reduce to a `XorExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:103:5: 103:17: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   Factor = Expr (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   OrExpression = Expr (*) "|" XorExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"|"` we can reduce to a `Factor` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:55:5: 55:17: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   OrExpression = XorExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   XorExpression = XorExpression (*) "^" AndExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"^"` we can reduce to a `OrExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:62:5: 62:103: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   AndExpression = AndExpression "&" RelationExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   RelationExpression = RelationExpression (*) RelationOp ShiftExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   RelationOp = (*) "<" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   RelationOp = (*) ">" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"<"` we can reduce to a `AndExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:62:5: 62:103: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   AndExpression = AndExpression "&" RelationExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   RelationExpression = RelationExpression (*) RelationOp ShiftExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   RelationOp = (*) "<" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   RelationOp = (*) ">" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `">"` we can reduce to a `AndExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:76:5: 76:97: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   ArithmaticExpression = ArithmaticExpression AddOp Term (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   MulOp = (*) "*" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   MulOp = (*) "/" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Term = Term (*) MulOp Factor ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"*"` we can reduce to a `ArithmaticExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:76:5: 76:97: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   ArithmaticExpression = ArithmaticExpression AddOp Term (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   MulOp = (*) "*" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   MulOp = (*) "/" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Term = Term (*) MulOp Factor ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"/"` we can reduce to a `ArithmaticExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (<Expr> ",")+ (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"if"` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (<Expr> ",")+ (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"{"` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (<Expr> ",")+ (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `r#"\"[a-zA-Z0-9]+\""#` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (<Expr> ",")+ (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `r#"[0-9]+"#` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (<Expr> ",")+ (*) Expr "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" Comma<Expr> ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   CallExpr = (*) IdentExpr "(" ")" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ (*) Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) CallExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IdentExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) IfExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) LiteralExpr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" Stmt+ "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Expr = (*) "{" "}" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IdentExpr = (*) Identifier ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Identifier = (*) r#"[a-zA-Z]+[a-zA-Z0-9]*"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   IfExpr = (*) "if" ExprWithMath Expr "else" Expr ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) StringLiteral ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   LiteralExpr = (*) r#"[0-9]+"# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   StringLiteral = (*) r#"\"[a-zA-Z0-9]+\""# ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `r#"[a-zA-Z]+[a-zA-Z0-9]*"#` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = Expr (*) "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = Expr (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `","` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:67:5: 67:112: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   RelationExpression = RelationExpression RelationOp ShiftExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftExpression = ShiftExpression (*) ShiftOp ArithmaticExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftOp = (*) "<<" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftOp = (*) ">>" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"<<"` we can reduce to a `RelationExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:67:5: 67:112: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   RelationExpression = RelationExpression RelationOp ShiftExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftExpression = ShiftExpression (*) ShiftOp ArithmaticExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftOp = (*) "<<" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftOp = (*) ">>" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `">>"` we can reduce to a `RelationExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:72:5: 72:110: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   AddOp = (*) "+" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   AddOp = (*) "-" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ArithmaticExpression = ArithmaticExpression (*) AddOp Term ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftExpression = ShiftExpression ShiftOp ArithmaticExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"+"` we can reduce to a `ShiftExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:72:5: 72:110: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   AddOp = (*) "+" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   AddOp = (*) "-" ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ArithmaticExpression = ArithmaticExpression (*) AddOp Term ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   ShiftExpression = ShiftExpression ShiftOp ArithmaticExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"-"` we can reduce to a `ShiftExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:91:33: 91:43: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   (<Expr> ",")+ = (<Expr> ",")+ Expr (*) "," ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   Comma<Expr> = (<Expr> ",")+ Expr (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `","` we can reduce to a `Comma<Expr>` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:54:5: 54:87: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   OrExpression = Expr "|" XorExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   XorExpression = XorExpression (*) "^" AndExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"^"` we can reduce to a `OrExpression` but we can also shift
[ca_parser 0.1.0] 
[ca_parser 0.1.0] /home/accusitive/Programming/calcium/ca_parser/src/gram.lalrpop:58:5: 58:99: Conflict detected
[ca_parser 0.1.0] 
[ca_parser 0.1.0]     when in this state:
[ca_parser 0.1.0]   AndExpression = AndExpression (*) "&" RelationExpression ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0]   XorExpression = XorExpression "^" AndExpression (*) ["&", "'", "(", "()", ")", "*", "+", ",", "-", "/", ":", "<", "<<", "=", ">", ">>", "^", "bool", "else", "i32", "if", "let", "return", "struct", "{", "|", "}", "~", r#"\"[a-zA-Z0-9]+\""#, r#"[0-9]+"#, r#"[a-zA-Z]+[a-zA-Z0-9]*"#, EOF]
[ca_parser 0.1.0] 
[ca_parser 0.1.0]   and looking at a token `"&"` we can reduce to a `XorExpression` but we can also shift
